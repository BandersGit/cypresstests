
/***
 *       ______                   __ _  __   _                       __     
 *      / ____/____   ____   ____/ /(_)/ /_ (_)____   ____   ____ _ / /_____
 *     / /    / __ \ / __ \ / __  // // __// // __ \ / __ \ / __ `// // ___/
 *    / /___ / /_/ // / / // /_/ // // /_ / // /_/ // / / // /_/ // /(__  ) 
 *    \____/ \____//_/ /_/ \__,_//_/ \__//_/ \____//_/ /_/ \__,_//_//____/  
 *                                                                          
 */

// "Gunnar, skulle du kunna kila f칬rbi aff칛ren och k칬pa ett par baguetter? Och om de har 칛gg, k칬p ett dussin vettja!"
//
//  ---
//
//  Gunnar: "De hade 칛gg! H칛r 칛r br칬den: 游볬游볬游볬游볬游볬游볬游볬游볬游볬游볬游볬游볬"

/***
 *       _  __ _         _      __
 *      / |/ /(_)_  __ _(_)_  <  /
 *     /    // /| |/ // _ `/  / / 
 *    /_/|_//_/ |___/ \_,_/  /_/  
 *                                
 */

const uppg1 = (number) => {

    // Om 'number' 칛r 18 eller st칬rre, printa ut "Du 칛r myndig"

}
// Uncomment below to run manually
// uppg1(18)


const uppg2 = (number) => {


    // Om 'number' 칛r inom 친ldersspannet 13-19, printa ut "Du 칛r en ton친ring"


}
// Uncomment below to run manually
// uppg2(18)

const uppg3 = (age) => {

    // Om 'age' 칛r 20 eller st칬rre, printa ut "Du 칛r vuxen"
    // Om 'age' 칛r inom 친ldersspannet 13-19, printa ut "Du 칛r en ton친ring"
    // Om 'age' 칛r inom 친ldersspannet 0-12, printa ut "Du 칛r ett barn"
    // I alla andra fall, skriv ut "ogiltigt v칛rde, kan ej avg칬ra din 친lderskategori"
    // Avslutningsvis, skriv ut "Tack f칬r att du anv칛nt 친ldersbest칛mmaren 3000" (oavsett v칛rde p친 age)
    // Fyll p친 utifr친n den existerande strukturen nedan
    if (null) {
        // kod
    } else if (null) {
        // kod
    } else if (null) {
        // kod
    } else {
        // kod
    }
    // kod


}

// Uncomment below to run manually
// uppg3(5)


const uppg4 = (name) => {

    // Om name 칛r "Gunnar", returnera true
    // Annars, returnera false

}
// Uncomment below to run manually
// uppg4()


const uppg5 = (month) => {

    // Anv칛nd ett switch-statement f칬r att printa ut hur m친nga dagar 친rets 6 f칬rsta m친nader har
    // Du kan bortse fr친n skott친r
    // (month kan h칛r ha v칛rdena 'jan', 'feb', 'mar', 'apr', 'may', 'jun')
    // om det inte 칛r en m친nad med n친got av ovan angivna v칛rden, printa "ogiltigt v칛rde"

}
// Uncomment to run manually
// uppg5('jan')



const uppg6 = (age) => {

    // Ers칛tt null, f칬r att m.h.a. av ternary-operatorerna under returnera "myndig" resp. "omyndig" om villkoret 칛r uppfyllt
    const isMyndig = (age >= 18) ? null : null;

    console.log(`Du 칛r ${isMyndig}`)

}
// Uncomment to run manually
// uppg6(8)

/***
 *        _   __ _          _       ___ 
 *       / | / /(_)_   __ _(_) _   |__ \
 *      /  |/ // /| | / // __ `/   __/ /
 *     / /|  // / | |/ // /_/ /   / __/ 
 *    /_/ |_//_/  |___/ \__,_/   /____/ 
 *                                      
 */

const uppg7 = (weekday, hour) => {

    // En butik 칛r 칬ppen 07-21 p친 vardagar, 09-18 p친 l칬rdagar och st칛ngd p친 s칬ndagar
    // Skriv logik som printar ut "칬ppet" respektive "st칛ngt" beroende p친 variablerna weekday och hour 
    // (f칬rsta timmen, dvs 7 respektive 9, r칛knas som 칬ppen. Sista timmen, 21 & 18, r칛knas som st칛ngd)
    // ('weekday' kommer kunna h친lla v칛rdena 'monday, 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday')

}
// Uncomment to run manually
// uppg7("saturday", 15)



const uppg8 = (user, inputedUsername, inputedPassword) => {

    // I user finns attributen username samt password
    // J칛mf칬r dessa och returnera "Authorized" om de matchar inputedUsername respektive inputedPassword
    // Annars, returnera "UnAuthorized"

}
// Uncomment to run manually
// uppg8({ username: "Gunnar", password: "Hemligt" }, "Gunnar", "Hemligt")

/***
 *        ____                                                          _  ____ __             
 *       / __ ) ____   ____   __  __ _____ __  __ ____   ____   ____ _ (_)/ __// /_ ___   _____
 *      / __  |/ __ \ / __ \ / / / // ___// / / // __ \ / __ \ / __ `// // /_ / __// _ \ / ___/
 *     / /_/ // /_/ // / / // /_/ /(__  )/ /_/ // /_/ // /_/ // /_/ // // __// /_ /  __// /    
 *    /_____/ \____//_/ /_/ \__,_//____/ \__,_// .___// .___/ \__, //_//_/   \__/ \___//_/     
 *                                            /_/    /_/     /____/                            
 */


const uppg9 = (player) => {

    // Anv칛nd valfri s칬kmotor f칬r att finna information om en teknik kallad "Guard Clauses"
    // Nedan 칛r logik f칬r att hantera en spelare i ett spel, som skall utf칬ra en attack
    // M칛ngden skada som spelaren g칬r skall sedan returneras
    // Skriv om logiken m.h.a. av s.k. Guard Clauses

    const baseAttack = 20;


    if (player !== null) {
        if (player.isFrozen) {
            return 0
        } else {
            if (!player.isDead) {
                if (player.selectedPrimaryWeapon) {
                    return baseAttack * player.selectedPrimaryWeapon.attackModifier
                } else {
                    return baseAttack;
                }
            } else {
                return 0;
            }
        }
    } else {
        throw new Exception("Player object null or undefined")
    }

}
// Uncomment to run manually
// uppg9("Gunnar")


module.exports = {
    uppg1, uppg2, uppg3, uppg4, uppg5, uppg6, uppg7, uppg8, uppg9
}